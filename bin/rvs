#!/usr/bin/env ruby

require_relative 'rvs_commands/rvs_base.rb'
require_relative 'rvs_commands/fetch_and_rebase.rb'
require_relative 'rvs_commands/push_to_qa.rb'
require_relative 'rvs_commands/push_to_origin.rb'
require_relative 'rvs_commands/jira_show.rb'
require_relative 'rvs_commands/status_show.rb'
require_relative 'rvs_commands/pr_create.rb'
require_relative 'rvs_commands/pr_view.rb'

API = '/Users/jkahne/projects/work/rvshare/rvshare-api'.freeze
DASH = '/Users/jkahne/projects/work/rvshare/rvshare-dashboard'.freeze
MARK = '/Users/jkahne/projects/work/rvshare/rvshare-marketplace'.freeze
REMOVE_QA_NAMES = ['jeremy'].freeze
QA = 'jeremy'.freeze

def update(path, command)
  puts "‚ÄºÔ∏è  #{command}"
  opts = {path: path, qa_target: QA, remove_qa_names: REMOVE_QA_NAMES}

  # have default commands be the name of the objects.  allow, via configuration, for users to add their own 'flags' to use

  case command
  when "rebase"
    FetchAndRebase.new(opts).doit
  when "push"
    PushToOrigin.new(opts).doit
  when "qa"
    PushToQa.new(opts).doit
  when "pr"
    PrView.new(opts).doit 
  when "create-pr"
    PrCreate.new(opts).doit
  when "jira"
    JiraShow.new(opts).doit
  when "st", "status"
    StatusShow.new(opts).doit
  when "help"
    show_help
  when "pto"
    FetchAndRebase.new(opts).doit
    PushToOrigin.new(opts).doit
    StatusShow.new(opts).doit
  end
end

def show_help
  puts "print help here.."
end


system("clear") || system("cls")
p @options

[API, DASH, MARK].each do |directory|
  puts "‚Ü™ üóÇÔ∏è Changing to #{directory}"
  ARGV.each do |command| 
    update(directory, command )
    puts 
  end
end
