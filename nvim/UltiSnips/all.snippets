snippet test
things go here
and here $1
and here ${2:default text}
and finally here ${3:`date +%Y/%m/%d`}

And this will mimic the first tab stop: $1
$0
endsnippet

snippet div
<div>
  $1
</div>
endsnippet

snippet divc
<div class="$1">
  $2
</div>
endsnippet

snippet desc "describe '' do ... end"
describe "$1" do
  $2
end
endsnippet

snippet it "it '' do ... end"
it "$1" do
  $2
end
endsnippet

snippet cl
console.log('$1')
endsnippet

snippet ct
console.table('$1', $2)
endsnippet

snippet blog
---
tags: [ruby, sql, til]
draft: true
---

$1
endsnippet

snippet genserver
# from https://github.com/abiwinanda/ex-snippet/tree/master/template
defmodule $1 do
  @moduledoc """
  module doc
  """
  use GenServer, restart: :transient

  ##########
  # Client #
  ##########

  def start_link(args) do
    GenServer.start_link(__MODULE__, args, name: __MODULE__)
  end

  @doc """
  function doc
  """
  def call(args) do
    GenServer.call(__MODULE__, {:$2, args})
  end

  @doc """
  function doc
  """
  def cast(args) do
    GenServer.call(__MODULE__, {:$3, args})
  end

  ##########
  # Server #
  ##########

  def init(args) do
    {:ok, state}

    # Optional: execute handle_continue callback asynchronously after init
    # {:ok, state, {:continue, :setup}}
		# or
		# {:ok, state}
  end

  # Optional: handle work asynchronously after init
  # def handle_continue(:setup, state) do
  #   {:noreply, state}
  # end

  def handle_call({:$2, args}, _from, state) do
    {:reply, args, state}
  end

  def handle_cast(:$3, _from, state) do
    {:noreply, state}
  end

  # Optional: use registry to register genserver process
  # defp via(name), do: {:via, Registry, {YourRegistryModule, name}}
end
endsnippet


